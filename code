#include<iostream>
using namespace std;
int longestBitonicSubarray(int *input, int n) 
{
    int* output = new int[n]();
    output[0] = 1;
    for(int i=1;i<n;i++)
    {
        output[i] = 1;
        for(int j=i-1;j>=0;j--)
        {
            
            if(input[j] <input[i])
            {
                int possibleAns = output[j]+1;
                if(possibleAns > output[i])
                {
                    output[i] = possibleAns;
                }
            }
        }
    }
    int* output2 = new int[n]();
    output2[n-1] = 1;
    for(int i=n-2;i>=0;i--)
    {
        output2[i]=1;
        for(int j=i+1;j<n;j++)
        {
            
            if(input[j] <input[i])
            {
                int possibleAns = output2[j] +1;
                if(possibleAns > output2[i])
                {
                    output2[i] = possibleAns;
                }
            }
        }
    }
    for(int i=0;i<n;i++)
    {
        output[i] += output2[i];
    }
    int best =0;
    for(int i=0;i<n;i++)
    {
        if(output[i]>best)
        {
            best = output[i];
        }
    }
    delete[] output;
    delete[] output2;
    return best-1;
}

int main() {
  int n, input[100000];
  cin>>n;
  for(int i=0; i<n; i++) {
    cin>>input[i];
  }
  cout<<longestBitonicSubarray(input, n);
  return 0;
}
	
     	
     	
     	


